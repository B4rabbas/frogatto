{
id: "effects_attache",
prototype: ["transient_object"],
is_strict: true,
activation_border: 500,



properties: {
#-------------------------- vars --------------------------#
		/*
			note;  time_to_die is *not* a value for "how long after creation this thing self-deletes".  That's scheduled_death_at.  Rather, time_to_die is a setting that describes how long we delay object deletion after this object considers itself 'dead' - some particle systems need to stop spawning particles, and only delete themselves after all the particles have had time to expire.
		*/
	time_to_die: { type: "int", dynamic_initialization: true },
	scheduled_death_at: { type: "int|null", default: null },
	still_failing_debug_check: { type: "bool", default: false },
	
	custom_relative_pos_default: { type: "{mid_x: decimal, mid_y: decimal}|null", default: null },
#-------------------------- connections --------------------------#
	_parent_obj: "(obj transient_object <- me.parent)
						asserting not (me.parent = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._effects_attaches, add(_parent_obj._effects_attaches, [me]))",

#-------------------------- cosmetics --------------------------#
	relative_pos_default: "{mid_x: decimal, mid_y: decimal} :: if(custom_relative_pos_default, custom_relative_pos_default, { mid_x: 0, mid_y: 0 })",
	initialize_position: "commands :: execute(me, [
						set(relative_x, relative_pos_default.mid_x),
						set(relative_y, -relative_pos_default.mid_y),
					])",

#-------------------------- logic --------------------------#
	additional_death_cleanup: "commands :: null",

	schedule_death_cleanup: "commands :: execute(me, [
								turn_off,
								set(me.scheduled_death_at, cycle+time_to_die),
								set(always_active, true),
								schedule(time_to_die, [
									additional_death_cleanup ;
									die()
								])
							]) asserting me is obj effects_attache",

	do_setup: "commands :: [initialize_position]",
	turn_on: "commands :: null",
	turn_off: "commands :: null",
	
	debug_check: "if(scheduled_death_at != null, set(still_failing_debug_check, true)
	
	 asserting (not (still_failing_debug_check = true and scheduled_death_at = null)) and (not (scheduled_death_at = null and _parent_obj.hitpoints < 0)) | q(An effects object of type:' + me.type + ' and _addr:' + addr(me) + ' has become orphaned; if its parent dies and it doesn't have a cleanup scheduled, something has gone quite wrong.  Parents are supposed to always force these to die)
	 
	 )",
	 
#-------------------------- constructors/destructors --------------------------#
	 hittable_obj_constructor: "[attach_to_spawner, do_setup, bind_command(def() turn_on)]",
	 hittable_obj_destructor: "additional_death_cleanup",
},

timer_frequency: 10,
on_timer: "debug_check",


	//we're using this semi-obscure event to help prevent overwriting of necessary behavior, since overriding on_create without calling the superclass implementation is extremely common.  Virtually nothing uses this event, so it's almost certain not to be overridden.
/*
on_create: "constructor",
on_spawned: "constructor",
on_being_added: "constructor",

on_being_removed: "destructor",
*/

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86, y: 73, w: 0, h: 0,
	duration: -1,
},

}
