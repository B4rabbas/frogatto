{
	id: "core_shaders",
	prototype: ["transient_object"],
	is_strict: true,

	properties: {

		hue_shift: { type: "decimal", default: 0.0 },
		saturation: { type: "decimal", default: 1.0 },
		luminance: { type: "decimal", default: 1.0 },
	},

	shader: {
		name: "hsl",

		fragment: "
			vec3 rgb_to_hsv(vec3 c)
			{
				vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
				vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

				float d = q.x - min(q.w, q.y);
				float e = 1.0e-10;
				return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			vec3 hsv_to_rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}

			uniform sampler2D u_anura_tex_map;
			uniform vec4 u_anura_sprite_area;
			uniform float u_property_alpha;
			uniform float u_property_saturation;
			uniform float u_property_luminance;
			uniform float u_property_hue_shift;
			varying vec2 v_texcoord;

			void main()
			{
				vec4 col = texture2D(u_anura_tex_map, v_texcoord);

				col.a *= u_property_alpha/255.0;

				col.rgb = rgb_to_hsv(col.rgb);
				col[0] += u_property_hue_shift;
				col[1] *= u_property_saturation;
				col[2] *= u_property_luminance;
				col.rgb = hsv_to_rgb(col.rgb);

				gl_FragColor = col;
			}
		",
	},
}
