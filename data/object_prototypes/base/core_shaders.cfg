{
	id: "core_shaders",
	prototype: ["hittable"],
	is_strict: true,



	shader: {
		name: "hsl",

		fragment: "
			vec3 rgb_to_hsv(vec3 c)
			{
				vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
				vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

				float d = q.x - min(q.w, q.y);
				float e = 1.0e-10;
				return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			vec3 hsv_to_rgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}

			uniform sampler2D u_anura_tex_map;

			//Some uniforms needed for palette support
			uniform sampler2D u_palette_map;
			uniform bool u_enable_palette_lookup;
			uniform float u_palette[2];
			uniform float u_palette_width;

			uniform vec4 u_anura_sprite_area;
			uniform float u_property_alpha;
			uniform float u_property_red;
			uniform float u_property_green;
			uniform float u_property_blue;
			uniform float u_property_saturation;
			uniform float u_property_luminance;
			uniform float u_property_hue_shift;
			uniform bool u_property_use_forced_hue;
			varying vec2 v_texcoord;

			void main()
			{
				vec4 col = texture2D(u_anura_tex_map, v_texcoord);

				//if this is a palette-controlled object lookup the palette color.
				if(u_enable_palette_lookup) {
					col = texture2D(u_palette_map, vec2(255.0 * col.r / (u_palette_width-0.5), u_palette[0]));
				}

				/*
					Start by premultiplying the r,g,b,a values by our object properties for how bright each channel's allowed to be.
				*/
				col.a *= u_property_alpha/255.0;
				col.r *= u_property_red/255.0;
				col.g *= u_property_green/255.0;
				col.b *= u_property_blue/255.0;

				/*
					Convert to HSV so we can isolate the different qualities (like hue) and change them independently.
				*/
				col.rgb = rgb_to_hsv(col.rgb);
				
				if( !u_property_use_forced_hue ){
					col[0] += u_property_hue_shift;
				} else {
					col[0] = u_property_hue_shift;
				}
				
				col[1] *= u_property_saturation;
				col[2] *= u_property_luminance;
				
				/*
					Convert back to RGBA because that's what GLSL takes as the value for a pixel.
				*/
				col.rgb = hsv_to_rgb(col.rgb);

				gl_FragColor = col;
			}
		",
	},
}
