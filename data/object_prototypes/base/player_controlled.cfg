# This prototype is for all the game-mechanics that have nothing to do with how a player moves, but which track stuff to do with things like key input, score tracking, events, achievements, inventory, etc.  This stuff should be fairly portable across game genre types.
# This prototype is the one declared in module.cfg as "the" playable character object type in frogatto, which all playable characters must inherit from.  The purpose of this is to allow us to reference functions specific to the character in levels (like recording game events) without having to do a type declaration on every single line.
# Also, this prototype must avoid any sort of physics/gameplay interaction with anything in the game, because it is also used for menu controllers and such.

{
id: "player_controlled",
solid_dimensions: [],
is_human: true,
prototype: ["hittable"],
collide_dimensions: [],

properties: {

	help: "string <- q{\nDebug Console Help:\nThis is the debug console. Commands, which are written in FFL, are run on the\nselected object. For example, you just ran the help command on our hero. Some\nother commands you could try might be 'set(velocity_y, -5000)', or 'add(hp,5)'.To change the target of your actions in the console, click on the desired\nobject. There is a lot more you can do with FFL, so have a look at the\ndocumentation on our wiki, https://github.com/frogatto/frogatto/wiki/. If you\nget stuck, www.frogatto.com has a friendly forum where you can seek advice.\nPress ctrl-d to close the console.\n}",

#-------------------------- events --------------------------#
	store_event_add: "def(string event_name, int addend) -> commands
		set(stored_events, zip(stored_events, {(event_name): addend}, a+b))
		asserting event_name != '' | {message:'Attempting to add a stored event, but the event name given is an empty string.', name:event_name, addend:addend}",
	
	store_event: "def(string event_name, int value) -> commands
		add(stored_events, {(event_name): value})
		asserting event_name != '' | {message:'Attempting to store an event, but the event name given is an empty string.', name:event_name, value:value}",
	
	get_stored_event: "def(string event_name) -> string|int|null (stored_events[event_name])",
	stored_events: {type: "{string -> int}", default: {"started_game" : 1}},


	is_demo_version: "bool :: false",

#-------------------------- random library functions that require storage in the player object --------------------------#
	
		//this one doesn't, yet, but we're preparing for it.
	screen_shake:  "def(decimal angle, decimal magnitude, decimal cross_magnitude, decimal duration) -> commands ;
			map(range(duration), schedule(value, lib.standardize.set_camera(level, [cam[0]+x_offset, cam[1]+y_offset ]))
				where x_offset = offset_amount * cos(angle) + cross_offset_amount * sin(angle)
				where y_offset = offset_amount * sin(angle) + cross_offset_amount * cos(angle)
				
				
				where cross_offset_amount = (cross_magnitude * _fade_out(_norm_val) * sin(_norm_val * 720))
				where offset_amount = (magnitude * lib.math.ease_in_elastic(1.0 - _norm_val))
				
					//make sure this starts centered and ends centered - basically wrapping it in these easing functions to ensure the start and end are faded out
				where _fade_out = def(decimal input) -> decimal	sin(90 + input*90) 	
				where _fade_in_and_out = def(decimal input) -> decimal 
					if(input < 0.25,  ((input*4) * sin(input*4 * 90))/4.0, ((input*(4/3)) * sin(90 + (input*(4/3) - 0.25) * 90))/(4.0/3.0))
				where _norm_val = decimal(value)/duration  //normalize value to a range between 0.0 ~ 1.0
				where cam = lib.standardize.natural_camera(level)
				
				//where renormalize_and_process = def(decimal offset, decimal scale, function operation) -> decimal  ((input*
			)",


#-------------------------- cutscene camera control --------------------------#
	observe_points_of_interest: "def([custom_obj] steps) -> commands [
		me.add_control_lock([], 'observe_points_of_interest'),
		internal_observe_points_of_interest(0, [level.player] + steps)
	]",

	internal_observe_points_of_interest: "def(int index, [custom_obj] steps) -> commands
		[
			spawn('camera_controller', x, y, {
				average_path: true,
				last_preview_route: true,
				passepartout: 'standard',
				path: if((source = level.player), [], [source]) + [dest],
				release_control: at_last_step,
				speed: 15,
				target_zoom: 1.0,
				tween_type: 'ease_in_out_cubic',
				start_with_player_as_first_node: (source = level.player),
				linked_delay: if(at_last_step, 0, 75),
				callback: [def() -> commands [
						if(size(steps) > 1,
							internal_observe_points_of_interest(index+1, steps[1:size(steps)]),
							
							//stuff done at the very end:
							me.remove_control_lock('observe_points_of_interest')
						)
					]
				]
			},[
				fire_event(child,'triggered')
			])
		]
			where at_last_step = (size(steps) = 1)
			where source = if(index = 0, level.player, steps[0])
			where dest = if(size(steps) > 1, steps[1], level.player)
	",


	observe_and_trigger_points_of_interest: "def([custom_obj] steps, bool new_state, commands final_callback) -> commands [
		if(size(steps) > 0,
			[
				me.add_control_lock([], 'observe_points_of_interest'),
				internal_observe_and_trigger_points_of_interest(0, [level.player] + steps, new_state, final_callback)
			]
		)
	]",

	internal_observe_and_trigger_points_of_interest: "def(int index, [custom_obj] steps, bool new_state, commands final_callback) -> commands
		[
			spawn('camera_controller', x, y, {
				average_path: true,
				last_preview_route: true,
				passepartout: 'standard',
				path: if((source = level.player), [], [source]) + [dest],
				release_control: at_last_step,
				speed: 20,
				target_zoom: 1.0,
				tween_type: 'ease_in_out_cubic',
				start_with_player_as_first_node: (source = level.player),
				linked_delay: if(at_last_step, 0, 80),
				early_callback_offset: if(at_last_step, 0, 50),
				callback: [def() -> commands [
						if(not at_last_step,
							[
								if(current_step is obj triggerable,[
									//debug(level.cycle, new_state),
									set(current_step.temporarily_lock_event_state, null),
									if(new_state = true, current_step.trigger_on, current_step.trigger_off)]
								) where current_step = steps[1],  //yes, [1], not [0].  We want the destination object the camera was 'moving to'.
								schedule(50, internal_observe_and_trigger_points_of_interest(index+1, steps[1:size(steps)], new_state, final_callback)),
							],

							
							//stuff done at the very end:
							[
								final_callback,
								me.remove_control_lock('observe_points_of_interest')
							]
						)
					]
				]
			},[
				fire_event(child,'triggered')
			])
		]
			where at_last_step = (size(steps) = 1)
			where source = preferred_camera_focus(if(index = 0, level.player, steps[0]))
			where dest = preferred_camera_focus(if(size(steps) > 1, steps[1], level.player))
			where preferred_camera_focus = def(custom_obj obj) -> custom_obj if(obj is obj triggerable, obj.preferred_visual_focus_object_for_camera, obj)
	",

#-------------------------- control-lock management --------------------------#
	add_control_lock: "def( [string] new_contents, string|custom_obj name ) -> commands execute(me,
		[
			set(me.control_lock, distilled_control_lock),
			set(me.control_lock_registry, new_registry)
		])
	
	where distilled_control_lock = unique(registry_contents)
	where registry_contents = flatten(map(new_registry, value.lock_contents))
	where new_registry = control_lock_registry + [{lock_contents: new_contents, name: if(name is custom_obj, name.label, name)}]",
	
	remove_control_lock: "def( string|custom_obj name ) -> commands execute(me,
		[
			/*debug('removing_control_lock = ' + str(distilled_control_lock) + 'on cycle ' + str(cycle)),*/
			if(size(new_registry) > 0,
				set(me.control_lock, distilled_control_lock),
				set(me.control_lock, null)
			),
			set(me.control_lock_registry, new_registry)
		])
	
	where distilled_control_lock = unique(registry_contents)
	where registry_contents = flatten(map(new_registry, value.lock_contents))
	where new_registry = filter(control_lock_registry, value.name != name)
	",
	
	does_control_lock_exist: "def(string name) -> bool
		bool( find(map(control_lock_registry, value.name), value = name) )
	",
	
	apply_registry: "commands :: [
			set(me.control_lock, distilled_control_lock)
	
		where distilled_control_lock = unique(registry_contents)
		where registry_contents = flatten(map(control_lock_registry, value.lock_contents))
	]",


#-------------------------- hittable overrides --------------------------#
	team: "'player'",
	has_mini_hp_bar: "bool :: false",


#-------------------------- inventory commands --------------------------#
		#-- item --#
	has_item: "def(string item_name) -> bool items_carried[item_name] > 0",
	
	number_of_item: "def(string item_name) -> int if(has_item(item_name), items_carried[item_name], 0)",
	
	add_item: "def(string item_name, int count) -> commands
		set(items_carried, zip(items_carried, {(item_name) : count}, a+b))
		asserting item_name != '' | {message:'Attempting to get an item out of inventory, but the item type given is an empty string.', name:item_name, count:count}",
	
	set_item_amount: "def(string item_name, int count) -> commands
		add(items_carried, {(item_name) : count}) //This sets the amount, because lists when added to overwrite values if the key already exists.
		asserting item_name != '' | {message:'Attempting to set an item in inventory, but the item type given is an empty string.', name:item_name, count:count}",
	items_carried: { type: "{string -> int}", default: {} }, //Used to keep track of what items we have. Access via has_item, add_item, etc.
	
	item_list_full: "[string] :: []",


		#-- gold --#
	acquire_gold: "def(int increase) -> commands [
		if((int <- coins_total_obtained) + increase >= 10, achievement('pocket_money')),
		if(coins_total_obtained + increase >= 1000, achievement('numismatologist')),
		if(coins + increase >= 99999, [
			set(coins, 99999),
			set(gold_counter, 99999-coins),
		], [
			add(coins, increase),
			add(coins_total_obtained, increase),
			add(gold_counter, increase),
		]),
		set(last_got_gold, level.player.cycle),
		fire_event(level.player,'display_gold')
	]",

	
	
	//TODO: Test this.
//	register_kill: "def(object enemy) -> commands [
//		if(time()-chain[size(chain)-4][1] < 10,
//			achievement('rampage')), //Look past the current object, and four objects into history, to get the timestomp of the enemy. If the time difference is less than five seconds, you get an achievement!
//		if(not find(chain, value[0] and value[0].type != chain[0][0].type), 
//			achievement('grudge')),
//		set(me.vars.achievement_kill_chain, slice(me.vars.achievement_kill_chain, 1, 16) + [[enemy, time()]])
//	] where chain = me.vars.achievement_kill_chain",
	
	register_kill: "def( obj hittable victim) -> commands null", //ignore this for now, deal with it later
	
//	register_kill: "def( obj hittable victim) -> commands [
//						set(recorded_kills, slice(recorded_kills, 1,16) + {victim.type : time() }), //record only the last 16, don't grow the structure indefinitely
//						
//							//two achievements we check for:
//							// 'rampage' - check the last five objects, see if they all got killed within 5 seconds.
//						if(time() - timestamps[ size(timestamps) -4] < 10,  achievement('rampage')) where timestamps = values(recorded_kills),
///							// 'grudge' - check if the last 10 objects killed were all the same type
//						if(size(enemy_types) > 9, if(not find(enemy_types[size(enemy_types)-10, size(enemy_types)], value != enemy_types[size(enemy_types)])  , achievement('grudge'))) where enemy_types = keys(recorded_kills),
//					]",

#-------------------------- vars --------------------------#
	control_lock_registry: { type: "[{lock_contents: [string], name: string}]", default: [] },

		#-- general --#
	recorded_kills: { type: "{string -> int}", default: {"nothing" : 0} },  
	score: {type: "int", default: 0},
	high_score: {type: "int", default: 0, persistent: false},
	levels_visited: { type: "[string]", default: [] },
	
	heal: "def(int amount) -> commands add(me.hitpoints, int <- min(amount, level.player.max_hitpoints-level.player.hitpoints))", //There is no equivalent mana function because mana, not being a built-in, has been able to have a setter added to it that does the same thing.

		#-- money --#
	coins: { type: "int", default: 0 },
	coins_total_obtained: { type: "int", default: 0 },
	last_got_gold: { type: "int", default: 0 },		//tracks how long ago you got a coin, to decide if we should pop up a number for the tally
	gold_counter: { type: "int", default: 0 },		//used to tally up recent acquisition of gold for the "number" that will flash in the air after you grab several coins.

	
		#-- mana --#
	mana: {
		type: "decimal",
		default: 5000,
		set: "[commands] <- [
			set(_data, if(not should_manashock, newValue, 0)), 
			if(should_manashock, set(mana_shock_cycle, cycle))
		] where should_manashock = sign(newValue - _data) < 0 and newValue < mana_regen_per_frame*2
		  where newValue = median(0, value, max_mana)"
	},
	
	mana_shock_active: "bool :: cycle - mana_shock_cycle < mana_shock_duration",
	mana_shock_duration: "int :: 150",
	mana_shock_cycle: { type: "int", default: -150 },
	mana_shock_guard: "def(commands thingToDo) -> commands if(not mana_shock_active, thingToDo)",

	mana_regen_per_frame: 1,
	max_mana: { type: "int", default: 5000 },
},

on_display_gold: "[
	if( cycle - last_got_gold > 20 and gold_counter > 0, [
		spawn('text_flash',midpoint_x,midpoint_y-20,{ txt: '+'+gold_counter}), 
		set(gold_counter,0)
	], 
		schedule(10,fire_event('display_gold'))
	),
]",

}
