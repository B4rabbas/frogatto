{
id: "pullable", //ie, levers.
prototype: ["hittable"],
always_active: true,

zorder: "@include data/zorder.cfg:exterior_decor",
			
editor_info: {
	category: "keys & triggers",
	help: "A lever that can be pushed one way or the other. Can be connected to gates and such.",
},

properties: {
	team: "'neutral'",
	get_hit_by: "def(obj hittable obj) -> commands execute(me, if(time_in_animation > 20, do_toggle))",

	toggle_away_from_default_event_state: "if(_event = default_event_state, do_toggle)",
	do_toggle: "if(_event = 0,	[level.player.store_event(event, 1), visually_turn_on, broadcast_trigger(1)],
								[level.player.store_event(event, 0), visually_turn_off, broadcast_trigger(0)])",
	visually_turn_on: "commands :: [sound('switch.wav'), set(animation, 'pushed')]",
	visually_turn_off: "commands :: [sound('switch.wav'), set(animation, 'normal')]", 

	_post_camera_pan_callback: "commands :: fire_event(me, 'finish_cutscene')",
	broadcast_trigger: "def(int new_state) -> commands [
		/*
			In this function, we go through all the triggerables and activate them all (or deactivate, as the case may be).
			If they're meant to have the camera pan to them, then we want to specially wait to trigger them until the camera is on them.
		*/
		level.player.observe_and_trigger_points_of_interest(observable_responders, bool(new_state), _post_camera_pan_callback),
		map(event_specific_responders,
				[
					/*
						Temporarily lock the event state of all the observable responders, so they don't show their new status until actually triggered.
					*/
					if(value.should_be_observed,
						set(value.temporarily_lock_event_state, if(new_state = 1, 0, 1))
					),


					/*
						On the other hand, if they're not meant to be given the camera-spotlight treatment, then just trigger them right away.
					*/
					if((not value.should_be_observed),
						if(new_state = 1, value.trigger_on, value.trigger_off)
					)
				] 
			)
		]
			where observable_responders = filter(event_specific_responders, value.should_be_observed)
			where event_specific_responders = filter(responders, value.event = me.event)
			where responders = ([obj triggerable] <- filter(level.chars, value is obj triggerable))
	",
		
	event: { type: "string", default:"", editor_info: { type: "string" } },
	_event: "if(level.player.get_stored_event(event) = null, default_event_state, level.player.get_stored_event(event))",  //if it hasn't been defined yet, we want it to return 0 because some things explicitly check for zero, rather than falsey values
	default_event_state: { type: "int", default: 0, editor_info: { type: "int" }},
	
	force_event_storage: "if(level.player.get_stored_event(event) = null, level.player.store_event(event, default_event_state))",
},

on_create: "[force_event_storage, set(animation, if(_event = 0, 'normal', 'pushed'))]
	asserting event != '' | 'All toggleable trigger objects must have an event so they persist across levels.'",

on_collide_object_body: "if(arg.collide_with.team = 'player' and (arg.collide_with_area in ['grab', 'attack', 'thrown']), [
	swallow_event(), 
	get_hit_by(arg.collide_with),
]) asserting arg.collide_with is obj hittable",

}