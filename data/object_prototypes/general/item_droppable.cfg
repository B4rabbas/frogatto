//this prototype is specifically for acquirable items which can be dropped by enemies, and which have a "expiration time" - you have to pick them up in N cycles or they disappear.

{
id: "item_droppable",
is_strict: true,
always_active: true,


prototype: ["item_acquirable"],

properties: {
	_time_to_live: "int :: 500",
	_remaining_time: "int :: _time_to_live - cycle",

		//these are the flicker effects where something flickers transparent because it's about to die
	do_flicker_fx: "commands :: if(_remaining_time < 200, 
										if(_remaining_time < 75,
											if(cycle%4=0, set(alpha,255), set(alpha,0)),
											if(cycle%2=0, set(alpha,255), set(alpha,0))
										)
									)",
	
	// TODO: Set player mana cube chain to 0 on death or on exit level.
	_check_time_to_live: "commands :: if(cycle > _time_to_live, die())",

#-------------------------- vars --------------------------#
	time_last_played_fx: { type: "int", default: 0, persistent: false }, 
	
	
#-------------------------- terrain collisions --------------------------#
	valid_physics_profiles: "[string] :: ['floaty', 'weighty']",
	physics_profile: "string :: 'floaty'",

	custom_impact_fx: "commands :: null",  //used for e.g. the mana cubes flickering brightly upon contact

	general_collision_handler: "def(int x_bias, int y_bias, commands terrain_response) -> commands execute(me, bind_command(def() [

						
									if(level.cycle - time_last_played_fx > 5, [
										set(time_last_played_fx, level.cycle),
										custom_impact_fx,
										/*
											cannot do the following because impact_cloud is currently inside hittable
										if( speed > 1000, impact_cloud(x_bias, y_bias, 'large'), if(speed > 100, impact_cloud(x_bias, y_bias, 'small'))),
										*/
									]),
									terrain_response,
								]))",


	terrain_response_head: "commands :: set(velocity_y, -velocity_y/2)",
	terrain_response_side: "commands :: set(velocity_x, -velocity_x/2)",
	terrain_response_feet: "commands :: 
							[
								if(velocity_y + abs(velocity_x) > 25, 
									if(physics_profile = 'floaty',
										[
											set(velocity_y, -(velocity_y*9)/10 - (velocity_x*slope_standing_on)/90.0),
											set(velocity_x, (velocity_x*9)/10 + (velocity_y*slope_standing_on)/90.0)
										],
										[
											set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90.0),
											set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90.0)
										]
									) asserting physics_profile in valid_physics_profiles,
									//else do nothing, let our velocity naturally bleed down
								),
								//set(rotate, slope_standing_on),
							]
							",	
},

on_process: "[do_flicker_fx, _check_time_to_live, proto_event('item_acquirable', 'process')]",

on_collide_head: "general_collision_handler(mid_x, y, terrain_response_head)",
on_collide_side: "general_collision_handler(mid_x, mid_y, terrain_response_side)",
on_collide_feet: "general_collision_handler(mid_x, y2, terrain_response_feet)",

}
