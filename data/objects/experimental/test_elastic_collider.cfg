{
id: "test_elastic_collider",
	is_strict: true,
	prototype: ["cosmetic_effects"],
	editor_info: {
		category: "experimental",
	},
	solid_area: [0,0,31,31],

	has_feet: false,
	properties: {
		_last_elastic_collided: { type:"int", default: 0 },

				/*there's a sharp loss of precision as this goes through the calculations, even though the resulting angles from the calcs are right.  I've beaten my head against this and can't, for the life of me, figure out what's going wrong; I don't know if it's due to data type precision, or what.  So what we're doing instead is figuring out how much we've deviated from the correct "conservation of momentum" velocity magnitude, and we use that as a fudge-factor to multiply the values back up into the right ballpark area.  It's a horrible hack ... but that's the price of getting things done. */

		two_party_elastic_collision: "def( obj test_elastic_collider other_object, decimal multiplier=1.0 ) -> commands
				if(cycle - _last_elastic_collided > 0 and cycle - other_object._last_elastic_collided > 0, 
				[
	//				debug(my_new_velocity.x + ' ' + my_new_velocity.y + ' ' + others_new_velocity.x + ' ' + others_new_velocity.y),
	/*				debug('initial_vel: '+(abs(hypot(velocity_x,velocity_y))+abs(hypot(other_object.velocity_x,other_object.velocity_y)))+
					' rot_vel: '+ (abs(hypot(my_velocity_in_rotated_coords.x,my_velocity_in_rotated_coords.y)) + abs(hypot(others_velocity_in_rotated_coords.x,others_velocity_in_rotated_coords.y)))+
					' rot_vel_posthit: '+ (abs(hypot(my_new_velocity_in_rotated_coords.x,my_new_velocity_in_rotated_coords.y)) + abs(hypot(others_new_velocity_in_rotated_coords.x,others_new_velocity_in_rotated_coords.y)))+
					' final_vel: '+ (abs(hypot(my_new_velocity.x,my_new_velocity.y)) + abs(hypot(others_new_velocity.x,others_new_velocity.y)))+
					' angle:' + angle_of_incidence%90),*/


					set(velocity_x, (my_new_velocity.x) * fudge_factor * multiplier),
					set(velocity_y, (my_new_velocity.y) * fudge_factor * multiplier),
					set(other_object.velocity_x, (others_new_velocity.x) * fudge_factor * multiplier),
					set(other_object.velocity_y, (others_new_velocity.y) * fudge_factor * multiplier),
					set(_last_elastic_collided, cycle),
					set(other_object._last_elastic_collided, cycle)


				])
			
			where fudge_factor = 1.002 * ((abs(hypot(velocity_x,velocity_y))+abs(hypot(other_object.velocity_x,other_object.velocity_y))) /
					 ((abs(hypot(my_new_velocity.x,my_new_velocity.y)) + abs(hypot(others_new_velocity.x,others_new_velocity.y))))),


			where my_new_velocity = {	x: cos(angle_of_incidence) * my_new_velocity_in_rotated_coords.x  +  cos(opp_angle_of_incidence) * my_new_velocity_in_rotated_coords.y,
										y: sin(angle_of_incidence) * my_new_velocity_in_rotated_coords.x  +  cos(opp_angle_of_incidence) * my_new_velocity_in_rotated_coords.y },
									
			where others_new_velocity = {	x: cos(angle_of_incidence) * others_new_velocity_in_rotated_coords.x  +  cos(opp_angle_of_incidence) * others_new_velocity_in_rotated_coords.y,
											y: sin(angle_of_incidence) * others_new_velocity_in_rotated_coords.x  +  cos(opp_angle_of_incidence) * others_new_velocity_in_rotated_coords.y },
									
	
			where my_new_velocity_in_rotated_coords = {	x: (my_velocity_in_rotated_coords.x * (my_mass - others_mass) + others_velocity_in_rotated_coords.x * (my_mass + others_mass)) / (my_mass + others_mass),
														y: my_velocity_in_rotated_coords.y },
			where others_new_velocity_in_rotated_coords = { x: (my_velocity_in_rotated_coords.x * (my_mass + others_mass) + others_velocity_in_rotated_coords.x * (others_mass - my_mass)) / (my_mass + others_mass),
															y: others_velocity_in_rotated_coords.y },
	
			where my_velocity_in_rotated_coords = {	x: my_vel_mag * cos(my_angle_of_motion - angle_of_incidence), y: my_vel_mag * sin(my_angle_of_motion - angle_of_incidence)}
				where my_vel_mag = hypot(velocity_x,velocity_y)
				where my_angle_of_motion = atan2( velocity_y, velocity_x )
			where others_velocity_in_rotated_coords = {	x: others_vel_mag * cos(others_angle_of_motion - angle_of_incidence), y: others_vel_mag * sin(others_angle_of_motion - angle_of_incidence)}
				where others_vel_mag = hypot(other_object.velocity_x,other_object.velocity_y)
				where others_angle_of_motion = atan2( other_object.velocity_y, other_object.velocity_x )

			where my_mass = 1.0 where others_mass = 1.0
			where angle_of_incidence = lib.math.angle(other_object, me)
			where opp_angle_of_incidence = lib.math.angle(me, other_object)",


	},
	on_create: "[set(velocity_x, 1d600-300), set(velocity_y, 1d600-300)]",

	on_collide_side: "if(arg.collide_with is obj test_elastic_collider, 
							two_party_elastic_collision(arg.collide_with),
							set(velocity_x, -velocity_x)
						)",
	on_collide_feet: "if(arg.collide_with is obj test_elastic_collider,
							two_party_elastic_collision(arg.collide_with),
							set(velocity_y, -velocity_y)
						)",
	on_collide_head: "if(arg.collide_with is obj test_elastic_collider,
							two_party_elastic_collision(arg.collide_with),
							set(velocity_y, -velocity_y)
						)",


	animation: {
		id: "normal",
		image: "statusbar.png",
		rect: [139,8,170,39],
	},
}