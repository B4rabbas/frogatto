{
	id: "ability_wall_sticker_block",
	prototype: ["throwable_projectile"],
	properties: {
		material_sound: "enum stone",
		is_player_ammo: "true",
		dies_on_impact: "false",
		death_fx_type: "'porcelain'",
		title: "~Vase~",
		description: "~Delicious, gelatin-like blocks of pure magic, designed as footholds.~",
		taste: "~Purple.~",
		
		ignores_player_momentum: "true",
		
		
		
		
#-------------------------- throwable overrides --------------------------#
		terrain_response_head: "custom_collide_behavior",
		terrain_response_feet: "custom_collide_behavior",
		terrain_response_side: "custom_collide_behavior",

		

		do_solid_impact_fx: "def(int x_bias, int y_bias) -> commands null",
		
		on_back_duration: "int :: 600",
		
		should_use_special_handle_collision_with_hittable_behavior: "def(obj hittable collide_with, string collide_with_area) -> bool
			collide_with is obj ability_wall_sticker_block
		",
	
		special_handle_collision_with_hittable: "def(obj hittable collide_with, string collide_with_area) -> commands execute(me, bind_command(def() 
			[
				custom_collide_behavior,
				if(	(collide_angle >= 45 and collide_angle <= 135) or
					(collide_angle >= 225 and collide_angle <= 315),
					set(mid_x, collide_with.mid_x),
					set(mid_y, collide_with.mid_y)
				)
			] where collide_angle = lib.math.angle(me, collide_with)
		))",

		custom_switch_to_being_on_back_behavior: "do_particle_flash",

		do_particle_flash: "
			spawn('particle_attache', {
				_particle_type: 'arcane_burst',
				x: mid_x,
				y: mid_y,
				parent: me,
				time_to_die: 200,
			})
		",

#-------------------------- custom behavior --------------------------#
		annul_velocity: "[set(velocity_x, 0),set(velocity_y, 0)]",

		custom_collide_behavior: "[switch_to_being_on_back, annul_velocity]",
	},

	friction: 0,

	solid_dimensions: ["player","common","boss"],
	solid_area: [8,10,23,25],
	platform_area: [8,10,23,11],

	on_create: "do_particle_flash",

	animation: [
		{
			"@base": true,
			image: "effects/item-graphics.png",
			pad: 3,
			frames: 1,
			duration: -1,
			rect: [0,0,31,31],
		},

		{
			body_area: "all",
			accel_y: 80,
			id: "normal",
		},

		{
			body_area: null,
			accel_y: 00,
			id: "thrown",
			thrown_area: "all",
			rect: [32,0,63,31],
		},
		{
			body_area: "all",
			accel_y: 00,
			id: "on_back",
		},
			
	],
}
