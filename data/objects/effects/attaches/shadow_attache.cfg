{
id: "shadow_attache",
prototype: ["effects_attache"],
zorder: "@include data/zorder.cfg:shadows",
is_shadow: true,
//zsub_order: -100000,


properties: {

	do_setup: "commands :: [initialize_position, animation(size_class)]",
#-------------------------- logic --------------------------#


	max_shrinkage_distance: 300.0,
	size_class: { type: "string", init: "'small'" },
	
	floor_beneath_parent: "{x: decimal, y: decimal} | null :: if(floor_val != null, {x: floor_val[0], y: floor_val[1]})
																where floor_val = floor_level_beneath_character(_parent_obj.mid_x,_parent_obj.y2-1, _parent_obj)",
	
	adjust_alpha: "def( {x: decimal, y: decimal} floor_val ) -> commands  set(me.alpha, lib.math.round(255*(scale)))",
	adjust_position: "def( {x: decimal, y: decimal} floor_val ) -> commands [set(mid_x, floor_val.x),set(mid_y, floor_val.y - _parent_obj.shadow_vertical_offset)]",
	adjust_size: "def( {x: decimal, y: decimal} floor_val ) -> commands set(scale,	 min(1.0,max(0.5,1.0 - distance/max_shrinkage_distance)))
																		where distance = abs(floor_val.y - _parent_obj.y2-1)",
},
		
		
			
on_process: "	if(_floor,
					[
						adjust_alpha(_floor),
						adjust_position(_floor),
						adjust_size(_floor)
					],
						set(me.alpha, 0)
				 ) where _floor = floor_beneath_parent",
			
			
			
animation: [{
	"@base": true,
	no_remove_alpha_borders: true,
	id: "medium",
	image: "effects/shadows.png",
	rect: [0,32,47,47],
	frames: 1,
},{
	id: "medium",
	rect: [0,32,47,47],
},{
	id: "medium_small",
	rect: [0,16,47,31],
},{
	id: "small",
	rect: [0,0,31,15],
},{
	id: "tiny",
	rect: [32,0,47,15],
}]
}