{
	id: "effects_attache_batch",
	prototype: ["effects_attache"],

	types: {
		VisualEffectType: "enum {
							fire,
							acid,
							arcane,
							energy
						}",
	},


	properties: {

		do_setup: "commands :: [
			initialize_position,
			spawn_color_attache,
			spawn_particle_sets,	
		]",
	
		turn_off: "commands :: [
			;map(subordinate_attaches, value.schedule_death_cleanup)
		]",


		subordinate_attaches: { type: "[obj effects_attache]", default: [] },

		is_past_timeout: "bool :: level.cycle - cycle_spawned_at > timeout",
		timeout: { type: "int", dynamic_initialization: true },
		cycle_spawned_at: { type: "int", init: "level.cycle" },
		
			//this gets set by the spawner as a way to compare whether it's based on a particular status the spawner has (such as being poisoned), rather than on a simple timeout
		special_death_criterion: { type:"null|function(obj transient_object)->bool", init: "null" },
				
		should_die: "bool ::
						if(special_death_criterion != null,
							special_death_criterion(_parent_obj),
							is_past_timeout
						)",
		
	#-------------------------- configuration --------------------------#
			//in all honesty, we'll only need one of these per batch.
//		color_adjustment_hsl: { type: "{ h: decimal, s: decimal, l: decimal }", default: { h: 0.0, s: 0.0, l: 1.0 } },
		color_adjustment_hsl: "effects_preset_data.hsl",
		
		
		spawn_color_attache: "
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('effects_attache_recolor', {
				color_adjustment_hsl: color_adjustment_hsl,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 0,
			})
		",
		
			//these, however, we could have a bunch of - same with the sounds
		//particle_types: { type: "[string]", init: "[]" },
		particle_types: "effects_preset_data.particle_types",
		

		spawn_particle_sets: "commands :: map(particle_types,
			[
				add_object(attache),
				add(subordinate_attaches, [attache]),
			] where attache = object('particle_attache', {
				_particle_type: value,
				x: mid_x,
				y: mid_y,
				parent: _parent_obj,
				time_to_die: 200,
			})
		)",	


	#-------------------------- presets --------------------------#
		effects_preset: { type: "VisualEffectType", init: "enum fire" },
		
		effects_preset_data: "	{
									hsl: {h: decimal, s: decimal, l: decimal},
									particle_types: [string],
								} ::
								_effects_preset_data_table[effects_preset]",
		
						
		
		_effects_preset_data_table: "{
								VisualEffectType ->	{
														hsl: {h: decimal, s: decimal, l: decimal},
														particle_types: [string],
													}
							} ::
						{
							enum fire:		{
														hsl: {h: 0.05, s: 1.0, l: 1.0},
														particle_types: ['forest_shooting_plant_white_sparkles_large'],
													},
							enum acid:		{
														hsl: {h: 0.35, s: 1.0, l: 1.25},
														particle_types: ['forest_shooting_plant_white_sparkles_large'],
													},
							enum arcane:	{
														hsl: {h: 0.8, s: 1.0, l: 0.9},
														particle_types: ['forest_shooting_plant_white_sparkles_large'],
													},
							enum energy:	{
														hsl: {h: 0.6, s: 1.0, l: 1.6},
														particle_types: ['forest_shooting_plant_white_sparkles_large'],
													},
						}",
			
	},


	on_process: "if(should_die, schedule_death_cleanup)",		

}
