//The mana bar displays how much energy for abilities we have.
{
	id: "boss_progress_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	no_compile_image: "gui/progress-bar-center.png,gui/progress-bar-well-center.png",

	properties: {
		bar_tween_speed: 16.0, //Decimal. Larger numbers = slower bar adjustment.
	
		heart_icon: {
			type: "widget", 
			init: "widget(me, {
				type: 'image',
				visible: false,
				x: 20,
				y: -56,
				image: 'gui/hud.png',
				area: [101,47,126,72], //xyxy
			})",
		},
		
		health_bar_background: {
			type: "bar_widget", 
			init: "bar_widget <- widget(me, {
				type: 'bar',
				visible: false,
				segment_length: level.camera_position[2]/2-90,
				left_cap_length: 8,
				right_cap_length: 8,
				x: 90,
				y: -44,
				bar: {
					image: 'gui/progress-bar-well-center.png',
					area: [0,0,1,11], //xywh
				},
				left_cap: {
					image: 'gui/progress-bar-well-endcaps.png',
					area: [0,0,8,11],
				},
				right_cap: {
					image: 'gui/progress-bar-well-endcaps.png',
					area: [8,16,8,11],
				},
			})",
		},
		
		health_bar: {
			type: "bar_widget", 
			init: "bar_widget <- widget(me, {
				type: 'bar',
				visible: false,
				segment_length: 1,
				left_cap_length: 8,
				right_cap_length: 8,
				x: 90,
				y: -44+4,
				bar: {
					image: 'gui/progress-bar-center.png',
					area: [0,0,1,7], //xywh
				},
				left_cap: {
					image: 'gui/progress-bar-endcaps.png',
					area: [0,0,8,7],
				},
				right_cap: {
					image: 'gui/progress-bar-endcaps.png',
					area: [0,8,8,7],
				},
			})",
		},
		
		last_displayed_value: { type: "decimal", default: 0.0 },
		recent_max_hitpoints: { type: "int", default: 0 },
		
		reset: "def() -> commands [
			//set((object<-level.gui[0].vars).bosses, []),                //Clear any saved bosses from the level. When the checkpoint is activated, it doesn't muck around with any of the level variables.
			map([widget]<-widgets.children, set(value.visible, false)), //Hide the display.
			set(last_displayed_value, 0.0),                             //And set the length to zero, so the bar starts off empty
		]",
		
		reset_boss_list: "commands :: set(me.boss_list, [])",
		
		//potential_bosses: "[obj hittable] :: filter(level.chars, value is obj hittable and value.is_a_boss)",
		boss_list: { type: "[obj hittable]", default: [] },
	},
	
	on_create: "[
		set_widgets(heart_icon, health_bar_background, health_bar),
	]",
	
	on_player_death: "reset_boss_list",
	
	on_process: "[[
		[
			set(last_displayed_value, display_value),
				// cache the hitpoints, because if the boss dies, we can no longer directly access it.
			if(direct_boss_max_hp > 0, set(recent_max_hitpoints, max(recent_max_hitpoints, direct_boss_max_hp))),
		
			map([widget]<-widgets.children, set(value.visible, bool(display_value))),
			if(display_value, 
				set(health_bar.segment_length, display_length),
				[set(recent_max_hitpoints, 0), set(boss_list,[])]
			),
		]
	] 
		where display_length = if(max_hp > 0, round(health_bar_background.segment_length*display_value/1.0/max_hp), 0)
		where display_value = if(abs(step) < 0.01, hp, last_displayed_value+step)
		where step = (hp - last_displayed_value) / bar_tween_speed
		where hp = fold([int]<-map(_bosses, value.hitpoints), a+b)
	] where max_hp = recent_max_hitpoints
	  where direct_boss_max_hp = fold([int]<-map(_bosses, value.max_hitpoints), a+b)
	  where _bosses = me.boss_list
	  ",
}

