//A health display, in the style of hearts. One hitpoint is half a heart.
{
	id: "heart_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		//target: { type: "custom_obj" },
		target: "custom_obj <- lp asserting lp where lp = level.local_player",
		target_hp: "int <- 
			lib.math.constrain(0, target.hitpoints, target.max_hitpoints) //always display a sane number, health can sink into the negative
			asserting target.hitpoints <= target.max_hitpoints | 'hud can not display more hitpoints (${target.hitpoints}) than max_hitpoints (${target.max_hitpoints})'
		", 
		
		heart_width: 38,
		heart_height: 38, 
		
		row_width: { type: "int", default: 5 },
		
		last_displayed_hitpoints: { type: "int", default: -1 },
		last_displayed_max_hitpoints: { type: "int", default: -1 },
	},
	
	on_process: "if(last_displayed_hitpoints != target.hitpoints or last_displayed_max_hitpoints != target.max_hitpoints, [ //Only set the widgets if something has changed.
		set(last_displayed_hitpoints, target.hitpoints),
		set(last_displayed_max_hitpoints, target.max_hitpoints),
		
		set_widgets(
			map(range(num_full), widget(me, { //Draw full hearts.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [33,49,49,65], 
				x: d_mod(value , row_width) * heart_width, 
				y: floor(value / row_width) * heart_height,
			})),
			map(range(num_half), widget(me, { //The half-heart. Still mapped even though there's only ever 0 or 1 because it makes the code parallel to the full and empty heart cases.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [52,49,68,65], 
				x: d_mod((num_full + value) , row_width) * heart_width, 
				y: floor((num_full + value) / row_width) * heart_height,
			})),
			map(range(num_empty), widget(me, { //Empty heart containers.
				type: 'image', 
				image: 'gui/hud3.png', 
				area: [71,49,87,65], 
				x: d_mod((num_full + num_half + value) , row_width) * heart_width, 
				y: floor((num_full + num_half + value) / row_width) * heart_height,
			}))
		)
		where num_empty = (target.max_hitpoints - target_hp) / 2
		where num_full = target_hp / 2
		where num_half = target_hp % 2
		where d_mod = lib.math.decimal_mod,
	])"
}

/* 
	This file is a port of the following code from hud.cfg, which was removed
	because it was not as flexible as we had wanted. It has been reindented and
	cleaned up as part of the process of understanding it so it could be moved.
	
	//// Display the rows of hearts. First, the whole hearts, then empty hearts, then the half-heart if needed.
	([	map(range( ceil(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
			slice(
				map(range(hearts_per_row), 'index', 
					draw_animation('heart_full', x_offset+x_width*index, y_offset+y_height*row_index)),
				0, 
				max(0, min(hearts_per_row, cur_HP/hp_per_heart - hearts_per_row*row_index))
			)
		),

		map(range(ceil(max_HP/decimal(hearts_per_row * hp_per_heart))), 'row_index',
			slice(
				map(range(hearts_per_row), 'index', 
					draw_animation('heart_empty', x_offset+x_width*index, y_offset+y_height*row_index)),
				max(0, min(hearts_per_row, (cur_HP)/hp_per_heart - hearts_per_row*row_index)), 
				min(hearts_per_row, ceil((max_HP)/decimal(hp_per_heart)) - hearts_per_row*row_index)
			)
		),
		
		if(cur_HP > 0 and cur_HP%hp_per_heart,
			map(range(hearts_per_row), 'index', 
				draw_animation('heart_half', x_offset+x_width*index, y_offset+y_height*row_index)
			)[cur_HP/hp_per_heart - row_index*(hearts_per_row)]
		) where row_index = cur_HP/(hearts_per_row * hp_per_heart)
	] where x_offset = 10,
	        y_offset = 52,
	        x_width = 32,
	        y_height = 32,
	        hp_per_heart = 2,
	        hearts_per_row = 5, //was 10
	        ceil = lib.math.ceil,
	        max_HP = level.local_player and level.local_player.max_hitpoints or 0,
	        cur_HP = level.local_player and level.local_player.hitpoints or 0 ),
*/