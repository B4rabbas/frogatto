//Show the currently selected ability, such as 'tongue' or 'firebreath'.
{
	id: "ability_secondary_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		player: "level.player",
		super_mode_active: "true",
		
		graphic: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1, {x:0,y:0})",
		},
		

		set_to_animation: "def( custom_obj target, [int,int,int,int] rect) -> commands
			set(target.animation, {
				image: 'gui/hud4.png',
				duration: -1,
				id: 'normal',
				rect: rect
			},
			
			)",

		graphic_post1: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1, {x:21, y:0})",
		},

		graphic_post2: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1, {x:41, y:0})",
		},


		has_just_changed: "bool :: player.last_toggled_secondary_item = player.cycle - 1",  //We're putting this a frame in the past because I'm not sure we can consistently rely on the player object to execute before this object, and if we were ever in a situation where that happened, the flag wouldn't be set by the time we checked this (and the player's cycle would probably be updated even before its processing, so effectively this would get "missed".  Maybe - it being a bug is contingent on that second thing actually being true, but this way there's no bug either way.

		do_carousel_anim: "commands :: [
			//debug(cycle),
			set(graphic_post2.alpha, 255),
			set(graphic_post2.x, x+202),
			;
			animate(graphic_post2, {
					x: x+202,
				},{
					duration: 60,
					name: 'hud_item_carousel',
					replace_existing: true,
					on_complete: anim2
			}) where anim2 = animate(graphic_post2, {
					alpha: 0,
					x: x+22,
				},{
					duration: 35,
					name: 'hud_item_carousel',
					replace_existing: true,
					easing: lib.math.ease_in_sine
				})
		]",
		

#-------------------------- inventory commands --------------------------#
		constructor: "[
			add_object(graphic), 
			add_object(graphic_post1), 
			add_object(graphic_post2), 
			set(graphic.xy, [x+22,y+22]),
			set(graphic_post1.xy, [x+112,y+22]),
			set(graphic_post2.xy, [x+202,y+22]),
		]"
	},
	
	on_start_level: "constructor", //When we enter a new level, the frogatto object retains the reference to ability_display object. Frogatto takes care of adding this object to the level. However, this object must add any objects it added previously. Since the object is only created once, on_create only ever fires once. Since the first level is not entered when this object is around, on_start_level only fires every time after the first level we enter.
	
	on_create: "constructor",
	
	//Sync UI state with Frogatto.
	on_process: "
		if(player is obj frogatto_playable,
			[
				set_to_animation(graphic, item_info.hud_img_rect ),
				set_to_animation(graphic_post1, item_post1_info.hud_img_rect ),
				set_to_animation(graphic_post2, item_post2_info.hud_img_rect ),
				set(graphic.brightness, 255/if(mana.ready, 1, 3)),

				if(has_just_changed,
					do_carousel_anim
				),				
			]
				where mana = player.current_mana_availability
				where item_info = player.item_info(player.current_secondary_item)
				where item_post1_info = player.item_info( player.nth_item_away_from_current_secondary_item(1) )
				where item_post2_info = player.item_info( player.nth_item_away_from_current_secondary_item(2) )
		)
	",
	
	animation: {
		id: "bg", //black bg, goes behind overlay
		image: "gui/hud3.png",
		rect: [80,0,127,47],
	},
	
	object_type: [
		{
			id: "graphic",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: -1,
			
			animation: [{
				"@base": true,
				image: "gui/hud4.png",
			}],
		},
		
	],
}