//Show the currently selected ability, such as 'tongue' or 'firebreath'.
{
	id: "ability_secondary_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",

	properties: {
		player: "level.player",
		super_mode_active: "true",
		
		graphic: {
			type: "custom_obj",  
			init: "object('${me.type}.graphic',0,0,1, {x:0,y:0})",
		},
		
		super_indicator: {
			type: "custom_obj",  
			init: "object('${me.type}.super_indicator',0,0,1)",
		},

		set_to_animation: "def([int,int,int,int] rect) -> commands
			set(graphic.animation, {
				image: 'gui/hud4.png',
				duration: -1,
				id: 'normal',
				rect: rect
			})",

	},
	
	on_start_level: "[add_object(graphic), add_object(super_indicator)]", //When we enter a new level, the frogatto object retains the reference to ability_display object. Frogatto takes care of adding this object to the level. However, this object must add any objects it added previously. Since the object is only created once, on_create only ever fires once. Since the first level is not entered when this object is around, on_start_level only fires every time after the first level we enter.
	
	on_create: "[
		add_object(graphic), 
		set(graphic.xy, [x+22,y+22]),
		
		add_object(super_indicator),
		set(super_indicator.xy, xy), //When being created, we don't have our position set yet, so we can't set our children's positions.
	]",
	
	//Sync UI state with Frogatto.
	on_process: "
		if(player is obj frogatto_playable,
			[
				set_to_animation( item_info.hud_img_rect ),
				set(graphic.brightness, 255/if(mana.ready, 1, 3)),
				set(si_uniforms.speed, if(mana.ready, 0.012, 0.004)),
				set(si_uniforms.show_ants, mana.super),
			]
				where mana = player.current_mana_availability
				where item_info = player.item_info(player.active_secondary_item_name),
				
		) where si_uniforms = super_indicator.shader.uniform_commands asserting super_indicator.shader
	",
	
	animation: {
		id: "bg", //black bg, goes behind overlay
		image: "gui/hud3.png",
		rect: [80,0,127,47],
	},
	
	object_type: [
		{
			id: "graphic",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: -1,
			
			animation: [{
				"@base": true,
				image: "gui/hud4.png",
			}],
		},
		
		{
			id: "super_indicator",
			is_strict: true,
			use_absolute_screen_coordinates: true,
			serializable: false,
			zorder: "@include data/zorder.cfg:in_front_of_everything",
			zsub_order: 1,
			
			animation: {
				id: "effect_mask", //'marching ants' effect overlay to indicate super ability
				image: "gui/hud3.png",
				rect: [32,67,79,114],
			},
			
			shader: {
				name: "ant_highlight",
				//This shader draws a magic colour (25,152,77) as a sort of marching ants effect.
				
				draw: "set(uniform_commands.u_cycle, parent.cycle)",
				
				vertex: "
					#version 120
					uniform mat4 u_anura_mvp_matrix;
					attribute vec4 a_anura_vertex;
					attribute vec2 a_anura_texcoord;
					varying vec2 v_texcoord;
					void main() {
						gl_Position = u_anura_mvp_matrix * a_anura_vertex;
						v_texcoord = a_anura_texcoord;
					}
				",

				fragment: "
					#version 120
					//image data
					uniform sampler2D u_tex_map;
					varying vec2 v_texcoord;
					uniform vec4 u_anura_sprite_area;
					uniform float u_cycle;
					
					//config options
					uniform bool show_ants = true;
					uniform float line_size = 0.29; //Tweak this so there are as many lines as you need at a time...
					uniform float line_offset = 0.015; //Then tweak this so they line up at the corners.
					uniform float speed = 0.010;
					
					//constants
					const vec4 mask_colour = vec4(25/255.0,152/255.0,77/255.0,255/255.0);
					
					void main() {
						vec4 pixel_colour = texture2D(u_tex_map, v_texcoord); //[r,g,b,a], 0..1
						vec2 sprite_center = vec2((u_anura_sprite_area[0] + u_anura_sprite_area[2])/2.0, (u_anura_sprite_area[1] + u_anura_sprite_area[3])/2.0);
						
						//Pass through colours which aren't keyed to allow embedding of ant effect in an image.
						if(pixel_colour != mask_colour) {
							gl_FragColor = pixel_colour;
						} else if(show_ants) {
							float dir = v_texcoord[0] - sprite_center[0] < v_texcoord[1] - sprite_center[1] ? 1 : -1; //Reverse if we're below the diagonal, so an ant comes full circle.
							float line_intensity = 1 - mod((v_texcoord[0]*dir+v_texcoord[1]*dir) + u_cycle*speed + line_offset*dir, line_size)/line_size; //Gradient, repeating.
							gl_FragColor = vec4(1*line_intensity, 1*line_intensity, 1*line_intensity, 1);
						} else {
							discard;
						}
					}
				",
			},
		},
	],
}