{
id: "status_pane",
prototype: ["inventory_screen_pane"],

properties: {
#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands null",
		

#-------------------------- core behavior --------------------------#
	initialize_parts: "commands :: [
		spawn_hearts

	]",

	spawn_hearts: "commands :: [		
		map(range(num_full), spawn('status_pane.heart_full', 
			(value) * heart_width + heart_x_offset, 
			0 + heart_y_offset,
		{
			parent: me,
		})),
		map(range(num_half), spawn('status_pane.heart_half',
			(num_full + value) * heart_width + heart_x_offset, 
			0 + heart_y_offset,
		{
			parent: me,
		})),
		map(range(num_empty), spawn('status_pane.heart_empty',
			(num_full + num_half + value) * heart_width + heart_x_offset, 
			0 + heart_y_offset,
		{
			parent: me,
		}))
	]		
		asserting
			player.hitpoints <= player.max_hitpoints |  //might just want to constrain the second one, here, later?
			player.hitpoints >= 0
			
		where
			num_full = player.hitpoints/2,
			num_half = player.hitpoints%2,
			num_empty = player.max_hitpoints/2-player.hitpoints/2-player.hitpoints%2,
			heart_width = 52,
			heart_height = 40,
			heart_x_offset = 40,
			heart_y_offset = -180 
		where
			player = level.player
		
	"




},



animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-background-status.png',
	x:0, y:0, w:276, h:264,
},



object_type: [
	{
		"@base": true,
		use_absolute_screen_coordinates: true,
		zorder: 1000,
	},

	{
		id: "heart_full",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,64,26,87], 
		},		
	},
	{
		id: "heart_half",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [27,64,53,87], 
		},		
	},
	{
		id: "heart_empty",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [54,64,80,87], 
		},		
	},

	

],
}
