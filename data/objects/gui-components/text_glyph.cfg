//object which represents a single text glyph. Give it a font and a char to make an object
//representing that text.
//example usage: map(glyphs, [set(value.y, 100), set(value.x, 100+sum(widths[:index])), add_object(value)]) where widths = map(glyphs, value.img_w) where glyphs = map(text, object('text_glyph', { font: 'title_font', char: value, pos: index, effect: if(index > 5 and index < 12, enum text_effect_wave, enum text_effect_none), zorder: 1000 })) where text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
{
	id: "text_glyph",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	types: {
		GlyphInfo: "{chars: string, width: null|int, rect: [int,int,int,int]|null}",
		FontInfo: "{texture: string, kerning: int, pad: int, glyphs: { string -> [int,int,int,int] } }",

		EffectType: "enum { text_effect_none, text_effect_wave }",
	},

	properties: {
		font: { type: "string" },
		char: { type: "string" },

		//position within the text stream.
		pos: { type: "int", default: 0 },

		effect: { type: "EffectType", default: "@eval enum text_effect_none" },

		scaling: { type: "decimal", default: 1.0 },

		_calculate_glyph_rect: "def([GlyphInfo] glyphs, int pad, int n) ->[int,int,int,int]
		if(glyph_info.rect, glyph_info.rect,

			[xpos, anchor_rect[1], xpos+ (int<-glyph_info.width), anchor_rect[3]]

			
			where xpos = anchor_rect[2] + spacing
			where spacing = sum(map(filtered_glyphs, pad + (int<- value.width)))
			where filtered_glyphs = glyphs[index(glyphs, anchor)+1:n]
			//anchor at the last glyph to have a defined rect
			where anchor_rect = [int,int,int,int]<- anchor.rect
			where anchor = find_or_die(reverse(glyphs[:n+1]), value.rect != null)
		)
		where glyph_info = glyphs[n]
		",

		get_font: "def(string id) ->FontInfo query_cache(global_cache(), id,
			{
				kerning: kerning,
				pad: pad,
				glyphs: glyphs,
				texture: string<- font_info.texture,
			}

			where glyphs = fold(map(single_glyph_chars, { (value.chars): _calculate_glyph_rect(single_glyph_chars, pad, index) }), a+b, {})

			//expand out into one glyph per entry
			where single_glyph_chars = fold(map(chars, if(size(value.chars) = 1, [value], map(value.chars, context.value + {chars: value}))), a+b, [])

			where chars = [GlyphInfo]<- font_info.chars
			where kerning = int<- font_info.kerning
			where pad = int<- font_info.pad
			where font_info = find_or_die([map]<- info.font, value.id = id)
			where info = {font: [map]}<- get_document('data/fonts.cfg')
		)",

		//property that controls adjustment of the position of the glyph
		pos_adjust: "[decimal,decimal] :: [
			0.0,
			if(effect = enum text_effect_none, 0.0,
			   effect = enum text_effect_wave, sin((pos*4 + cycle)*10.0)*5.0,
			   0.0)
		]
		",
	},

	events: {
		construct: "
		set(animation, {
			id: 'normal',
			image: font_info.texture,
			x: area[0],
			y: area[1],
			w: area[2] - area[0],
			h: area[3] - area[1],
			scale: scaling,
			frames: 1,
			duration: -1,
		})
		where area = font_info.glyphs[char] asserting char in font_info.glyphs
		where font_info = get_font(font)
		",
	},

	shader: {
		name: "text_glyph_shader",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
		uniform float u_property_cycle;
		uniform vec2 u_property_pos_adjust;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * (a_anura_vertex + vec4(u_property_pos_adjust.x, u_property_pos_adjust.y, 0.0, 0.0));
        }
		",

	fragment: "

        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform float u_property_alpha;
		uniform vec4 u_anura_sprite_area;
        void main()
        {
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			gl_FragColor = col;
			gl_FragColor[3] *= u_property_alpha/255.0;
		}
	",
	},
}
