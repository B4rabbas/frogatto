{
id: "padlock_key",
prototype: ["throwable"],
zorder: "@include data/zorder.cfg:player",
solid_dimensions: ["thrown"],
collide_dimensions: ["key"],
no_compile_image: "props/keys.png",
friction: 1000,

editor_info: {
	category: "keys & triggers",
},


properties: {
	swallowable: "bool :: true",
	material_sound: "'smallmetal'",
	taxonomy: "'neutral'",
	team: "'neutral'", //<- will collide with stuff on other teams, shouldn't do damage.  Can currently kill opponents if they're thrown into it.
	
	color: { type: "string", dynamic_initialization: true, editor_info: { type: "enum", value:"'gold'", enum_values: ["gold", "silver", "green", "red", "purple", "blue", "cyan"] } },
	event_name: { type: "string", default: "", editor_info: { type: "text" } },
	
	valid_levels: { type: "[string]", default: [] },
		
	set_to_animation: "def(string name) -> commands set(animation, { image: 'props/keys.png', accel_y: 80, body_area: 'all', duration: -1, id: name,
		rect: image_rect_for_color[color] })",
		
	image_rect_for_color: "{string->[int,int,int,int]} :: {
								'gold':			[0,0,15,15],
								'silver':		[16,0,31,15],
								'green':		[32,0,47,15],
								'red':			[48,0,63,15],
								'purple':		[64,0,79,15],
								'blue':			[80,0,95,15],
								'cyan':			[96,0,111,15]
							}",
#--------------------------  core behavior handlers --------------------------#	
		/*
			Basically we want to null out the core hittable behavior paths that lead to taking damage.  Keys (for the time being) are completely and utterly indestructible.  Do note that we actually don't deal with key-unlocking through the hittable/body collisions at all - we actually do it in an "on_collide_object" event in the target objects, and we do all the filtering (to limit it to just keys) with collide_dimensions, which not only greatly simplifies it, but is also very performant.
		*/
	handle_body_collision: "def(custom_obj _collide_with, string collide_with_area, [builtin user_collision_callable]|null all_collisions=null, int|null collision_index=null) -> commands null",
	
	get_hit_by: "def(obj hittable collide_with) -> commands null",

	get_hit_sourceless: "def(string damage_type, int damage_amount) -> commands null",

	//handle_collision_with_hittable: "def(obj hittable collide_with, string collide_with_area) -> commands null",
#-------------------------- respawn tracking --------------------------#
	original_position: { type: "{ x: int, y: int }", init: "{ x: me.x, y: me.y }" },
	number_of_cycles_we_have_been_underwater: { type: "int", init: "0" },
	
		
	restore_to_original_position: "commands :: [
									set(number_of_cycles_we_have_been_underwater, 0),
									set(me.xy, [original_position.x, original_position.y]),
									set(me.mid_x, original_position.x),
									set(me.mid_y, original_position.y),
									debug('reset key')
								]",


},

#-------------------------- handle key expiration and respawning --------------------------#
	/*
		Normally, we just use a regular activation area to save time, but once we've been interacted with, we should start tracking our physics regardless - we want to make sure we don't pause and fail to 'die' if we fall into a bottomless pit.
	*/
on_been_grabbed: "set(always_active, true)",

on_outside_level: "restore_to_original_position",

on_process: "if(not underwater, 
				set(number_of_cycles_we_have_been_underwater, 0),
				if(number_of_cycles_we_have_been_underwater > 100,
					restore_to_original_position,
					add(number_of_cycles_we_have_been_underwater, 1)
				)
			)",
#-------------------------- setup --------------------------#
on_create: "[
				if(color = null, set(color, attributes['color'])),
				if(attributes['color'] = null, set(attributes['color'], color)),					
			]",
on_load: "fire_event('create')",

on_start_level: "[ if(level.player.get_stored_event(event_name) = 1, remove_object(me)) ]",
solid_area: [0,0,15,15],


#-------------------------- animation --------------------------#
on_end_anim: "set_to_animation('thrown')",


}
